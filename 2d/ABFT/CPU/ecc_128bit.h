#ifndef ECC_128BIT_H
#define ECC_128BIT_H

#include <stdint.h>

#define S1_ECC_128BITS_upper 0x9C1FF000000001FFULL
#define S1_ECC_128BITS_lower 0xFFF8181FF000007FULL
#define S2_ECC_128BITS_upper 0x3BBB300000FFFE00ULL
#define S2_ECC_128BITS_lower 0x03F9AD2990001F81ULL
#define S3_ECC_128BITS_upper 0xF776A003FF003E00ULL
#define S3_ECC_128BITS_lower 0x7C1D62A54003E082ULL
#define S4_ECC_128BITS_upper 0xEEEE50FC0F03C207ULL
#define S4_ECC_128BITS_lower 0x842AC652C03C2104ULL
#define S5_ECC_128BITS_upper 0x7C1E071C711C4438ULL
#define S5_ECC_128BITS_lower 0x8847F81FC1C44208ULL
#define S6_ECC_128BITS_upper 0x9FE1FB65926488C9ULL
#define S6_ECC_128BITS_lower 0x10801FE036488410ULL
#define S7_ECC_128BITS_upper 0x41E1FDAAA4A91152ULL
#define S7_ECC_128BITS_lower 0x2107C7F03A910820ULL
#define S8_ECC_128BITS_upper 0xE3DDCED348D221A4ULL
#define S8_ECC_128BITS_lower 0x420631CE2D221040ULL
#define S9_ECC_128BITS_upper 0xFFFFFFFFFFFFFFFFULL
#define S9_ECC_128BITS_lower 0xFFFFFFFFFFFFFFFFULL

#define C1_ECC_128BITS 0x1
#define C2_ECC_128BITS 0x2
#define C3_ECC_128BITS 0x4
#define C4_ECC_128BITS 0x8
#define C5_ECC_128BITS 0x10
#define C6_ECC_128BITS 0x20
#define C7_ECC_128BITS 0x40
#define C8_ECC_128BITS 0x80

static uint8_t secded128_syndrome_table_int_wide[128] =
{
  0x03, 0x05, 0x09, 0x11, 0x21, 0x41, 0x81, 0x06,
  0x0A, 0x12, 0x22, 0x42, 0x82, 0x0C, 0x14, 0x24,
  0x44, 0x84, 0x18, 0x28, 0x48, 0x88, 0x30, 0x50,
  0x90, 0x60, 0xA0, 0xC0, 0x01, 0x02, 0x04, 0x08,
  0x17, 0x99, 0x95, 0x93, 0x59, 0x66, 0xE8, 0xE4,
  0xE2, 0x6C, 0x6A, 0x33, 0xB1, 0x96, 0x5C, 0x5A,
  0x56, 0xD8, 0xD4, 0x0F, 0x07, 0x0B, 0x13, 0x23,
  0x43, 0x83, 0x0D, 0x15, 0x10, 0x20, 0x40, 0x80,
  0x29, 0x49, 0x89, 0x31, 0x51, 0x91, 0x61, 0xA1,
  0xC1, 0x0E, 0x16, 0x26, 0x46, 0x86, 0x1A, 0x2A,
  0x4A, 0x8A, 0x32, 0x52, 0x92, 0x62, 0xA2, 0xC2,
  0x1C, 0x2C, 0x4C, 0x8C, 0x34, 0x54, 0x94, 0x64,
  0xA4, 0xC4, 0x38, 0x58, 0x98, 0x68, 0xA8, 0xC8,
  0x70, 0xB0, 0xD0, 0xE0, 0x6B, 0x67, 0xE9, 0xE5,
  0xE3, 0x1F, 0x9D, 0x9B, 0x97, 0x6E, 0xEC, 0xEA,
  0xE6, 0xAE, 0x3D, 0x3B, 0x37, 0x9E, 0xDC, 0xAD,
};

static inline int32_t get_fliped_bit_location_int_wide_128bit(uint32_t syndrome)
{
  for(uint32_t i = 0; i < 128; i++)
  {
    if(syndrome == secded128_syndrome_table_int_wide[i])
    {
      return i;
    }
  }
  return -1;
}

#endif // ECC_128BIT_H