#ifndef ECC_64BIT_H
#define ECC_64BIT_H

// #define HSIAO
#define HAMMING

#include <stdint.h>

#if defined(HSIAO)

#define S1_ECC_64BITS 0x0111111630F0F0FFULL
#define S2_ECC_64BITS 0x02222226CF00FF0FULL
#define S3_ECC_64BITS 0x64444440F0FF0F0CULL
#define S4_ECC_64BITS 0x68888880FF0F00F3ULL
#define S5_ECC_64BITS 0xCF00F0FF01111116ULL
#define S6_ECC_64BITS 0x30F0FF0F02222226ULL
#define S7_ECC_64BITS 0xF0FF00F364444440ULL
#define S8_ECC_64BITS 0xFF0F0F0C68888880ULL

#define C1_ECC_64BITS 0x1
#define C2_ECC_64BITS 0x2
#define C3_ECC_64BITS 0x4
#define C4_ECC_64BITS 0x8
#define C5_ECC_64BITS 0x10
#define C6_ECC_64BITS 0x20
#define C7_ECC_64BITS 0x40
#define C8_ECC_64BITS 0x80

static uint8_t secded64_syndrome_table_double[64] =
{
  0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
  0x16, 0x26, 0x46, 0x86, 0x13, 0x23, 0x43, 0x83,
  0x1C, 0x2C, 0x4C, 0x8C, 0x15, 0x25, 0x45, 0x85,
  0x1A, 0x2A, 0x4A, 0x8A, 0x0D, 0xCD, 0xCE, 0x0E,
  0x70, 0x73, 0xB3, 0xB0, 0x51, 0x52, 0x54, 0x58,
  0xA1, 0xA2, 0xA4, 0xA8, 0x31, 0x32, 0x34, 0x38,
  0xC1, 0xC2, 0xC4, 0xC8, 0x61, 0x62, 0x64, 0x68,
  0x91, 0x92, 0x94, 0x98, 0xE0, 0xEC, 0xDC, 0xD0
};

#elif defined(HAMMING)

#define S1_ECC_64BITS 0xAB55555556AAAD5BULL
#define S2_ECC_64BITS 0xCD9999999B33366DULL
#define S3_ECC_64BITS 0xF1E1E1E1E3C3C78EULL
#define S4_ECC_64BITS 0x01FE01FE03FC07F0ULL
#define S5_ECC_64BITS 0x01FFFE0003FFF800ULL
#define S6_ECC_64BITS 0x01FFFFFFFC000000ULL
#define S7_ECC_64BITS 0xFE00000000000000ULL

#define C1_ECC_64BITS 0x1
#define C2_ECC_64BITS 0x2
#define C3_ECC_64BITS 0x4
#define C4_ECC_64BITS 0x8
#define C5_ECC_64BITS 0x10
#define C6_ECC_64BITS 0x20
#define C7_ECC_64BITS 0x40

static uint8_t secded64_syndrome_table_double[64] =
{
  0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x08,
  0x0D, 0x0E, 0x0F, 0x11, 0x12, 0x13, 0x14, 0x15,
  0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
  0x1E, 0x1F, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26,
  0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E,
  0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
  0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
  0x3F, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47
};

static uint8_t secded64_syndrome_table_int_wide[64] =
{
  0x03, 0x05, 0x06, 0x07, 0x09, 0x0A, 0x0B, 0x0C,
  0x0D, 0x0E, 0x0F, 0x11, 0x12, 0x13, 0x14, 0x15,
  0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
  0x1E, 0x1F, 0x21, 0x22, 0x01, 0x02, 0x04, 0x08,
  0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E,
  0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
  0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
  0x3F, 0x41, 0x42, 0x43, 0x10, 0x20, 0x40, 0x08
};
#endif

static inline int32_t get_fliped_bit_location_double_64bit(uint32_t syndrome)
{
  for(uint32_t i = 0; i < 64; i++)
  {
    if(syndrome == secded64_syndrome_table_double[i])
    {
      return i;
    }
  }
  return -1;
}


static inline int32_t get_fliped_bit_location_int_wide_64bit(uint32_t syndrome)
{
  for(uint32_t i = 0; i < 64; i++)
  {
    if(syndrome == secded64_syndrome_table_int_wide[i])
    {
      return i;
    }
  }
  return -1;
}

#endif //ECC_64BIT_H